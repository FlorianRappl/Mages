<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mages.Core</name>
    </assembly>
    <members>
        <member name="T:Mages.Core.Ast.AbstractScope">
            <summary>
            Represents an abstract (compile-time) scope information.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.AbstractScope.#ctor(Mages.Core.Ast.AbstractScope)">
            <summary>
            Creates a new abstract scope.
            </summary>
            <param name="parent">The parent scope to use, if any.</param>
        </member>
        <member name="P:Mages.Core.Ast.AbstractScope.Parent">
            <summary>
            Gets the parent scope.
            </summary>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.ArgumentsExpression">
            <summary>
            The class for an argument expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ArgumentsExpression.#ctor(Mages.Core.Ast.IExpression[],Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates new arguments expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.ArgumentsExpression.Arguments">
            <summary>
            Gets the stored arguments.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.ArgumentsExpression.Count">
            <summary>
            Gets the number of arguments.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ArgumentsExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ArgumentsExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.AssignableExpression">
            <summary>
            Represents an expression that can be assigned.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.AssignableExpression.#ctor(Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new assignable expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.AssignableExpression.IsAssignable">
            <summary>
            Gets if the expression is assignable.
            </summary>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.AssignmentExpression">
            <summary>
            Represents an assignment expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.AssignmentExpression.#ctor(Mages.Core.Ast.IExpression,Mages.Core.Ast.IExpression)">
            <summary>
            Creates a new assignment expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.AssignmentExpression.Variable">
            <summary>
            Gets the variable (value on the left side).
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.AssignmentExpression.VariableName">
            <summary>
            Gets the variable name, if any.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.AssignmentExpression.Value">
            <summary>
            Gets the value on the right side.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.AssignmentExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.AssignmentExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.AwaitExpression">
            <summary>
            Represents a future wrapper.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.AwaitExpression.#ctor(Mages.Core.TextPosition,Mages.Core.Ast.IExpression)">
            <summary>
            Creates a new await expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.AwaitExpression.Payload">
            <summary>
            Gets the carried payload to be awaited.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.AwaitExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.AwaitExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.BaseExpression">
            <summary>
            Represents the shared core of all expressions.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.BaseExpression.#ctor(Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.BaseExpression.Start">
            <summary>
            Gets the start position of the expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.BaseExpression.End">
            <summary>
            Gets the end position of the expression.
            </summary>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.BinaryExpression">
            <summary>
            The base class for all binary expressions.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.BinaryExpression.#ctor(Mages.Core.Ast.IExpression,Mages.Core.Ast.IExpression,System.String)">
            <summary>
            Creates a new binary expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.BinaryExpression.LValue">
            <summary>
            Gets the value on the left side.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.BinaryExpression.RValue">
            <summary>
            Gets the value on the right side.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.BinaryExpression.Operator">
            <summary>
            Gets the associated operator string.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.BinaryExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.BinaryExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.CallExpression">
            <summary>
            Represents a function call.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.CallExpression.#ctor(Mages.Core.Ast.IExpression,Mages.Core.Ast.Expressions.ArgumentsExpression)">
            <summary>
            Creates a new function call expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.CallExpression.Function">
            <summary>
            Gets the associated function.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.CallExpression.Arguments">
            <summary>
            Gets the arguments to pass to the function.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.CallExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.CallExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.ComputingExpression">
            <summary>
            Represents a computed expression (not-assignable).
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ComputingExpression.#ctor(Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new computing expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.ComputingExpression.IsAssignable">
            <summary>
            Gets if the expression is assignable.
            </summary>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.ConditionalExpression">
            <summary>
            Represents a conditional expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ConditionalExpression.#ctor(Mages.Core.Ast.IExpression,Mages.Core.Ast.IExpression,Mages.Core.Ast.IExpression)">
            <summary>
            Creates a new conditional expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.ConditionalExpression.Condition">
            <summary>
            Gets the condition.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.ConditionalExpression.Primary">
            <summary>
            Gets the primary selected value.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.ConditionalExpression.Secondary">
            <summary>
            Gets the alternative selected value.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ConditionalExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ConditionalExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.ConstantExpression">
            <summary>
            Represents a constant (predefined value) expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ConstantExpression.#ctor(System.Object,Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new constant expression for the given value.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.ConstantExpression.Value">
            <summary>
            Gets the carried value.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ConstantExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ConstantExpression.From(System.Object,Mages.Core.ITextRange)">
            <summary>
            Creates a new constant expression carrying the given object.
            </summary>
            <param name="value">The value to carry.</param>
            <param name="range">The range that is covered.</param>
            <returns>The constant expression.</returns>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ConstantExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.DeleteExpression">
            <summary>
            Represents a delete expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.DeleteExpression.#ctor(Mages.Core.TextPosition,Mages.Core.Ast.IExpression)">
            <summary>
            Creates a new delete statement with the given payload.
            </summary>
            <param name="start">The start position.</param>
            <param name="payload">The payload to transport.</param>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.DeleteExpression.Payload">
            <summary>
            Gets the stored payload.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.DeleteExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.DeleteExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.EmptyExpression">
            <summary>
            Represents an empty expression (potentially invalid).
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.EmptyExpression.#ctor(Mages.Core.TextPosition)">
            <summary>
            Creates a new empty expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.EmptyExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.EmptyExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.FunctionExpression">
            <summary>
            Represents a function expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.FunctionExpression.#ctor(Mages.Core.Ast.AbstractScope,Mages.Core.Ast.Expressions.ParameterExpression,Mages.Core.Ast.IStatement)">
            <summary>
            Creates a new function expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.FunctionExpression.Scope">
            <summary>
            Gets the associated abstract scope.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.FunctionExpression.Parameters">
            <summary>
            Gets the defined parameters.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.FunctionExpression.Body">
            <summary>
            Gets the body to use.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.FunctionExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.FunctionExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.IdentifierExpression">
            <summary>
            Represents a generalized identifier, which is not a variable.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.IdentifierExpression.#ctor(System.String,Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new identifier expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.IdentifierExpression.Name">
            <summary>
            Gets the name of the identifier.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.IdentifierExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.IdentifierExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.InterpolatedExpression">
            <summary>
            Represents an interpolated string expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.InterpolatedExpression.#ctor(Mages.Core.Ast.Expressions.ConstantExpression,Mages.Core.Ast.IExpression[])">
            <summary>
            Creates a new interpolated string expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.InterpolatedExpression.Format">
            <summary>
            Gets the formatting string.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.InterpolatedExpression.Replacements">
            <summary>
            Gets the associated replacements.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.InterpolatedExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.InterpolatedExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.InvalidExpression">
            <summary>
            Represents an invalid expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.InvalidExpression.#ctor(Mages.Core.ErrorCode,Mages.Core.ITextRange)">
            <summary>
            Creates a new invalid expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.InvalidExpression.Payload">
            <summary>
            Gets the payload covered by the container.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.InvalidExpression.Error">
            <summary>
            Gets the associated error code.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.InvalidExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.InvalidExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.MatrixExpression">
            <summary>
            Represents a matrix expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.MatrixExpression.#ctor(Mages.Core.Ast.IExpression[][],Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new matrix expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.MatrixExpression.Values">
            <summary>
            Gets the initialized values.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.MatrixExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.MatrixExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.MemberExpression">
            <summary>
            Represents a member expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.MemberExpression.#ctor(Mages.Core.Ast.IExpression,Mages.Core.Ast.IExpression)">
            <summary>
            Creates a new member expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.MemberExpression.Object">
            <summary>
            Gets the associated object expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.MemberExpression.Member">
            <summary>
            Gets the associated member access.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.MemberExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.MemberExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.ObjectExpression">
            <summary>
            Represents an object literal.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ObjectExpression.#ctor(Mages.Core.Ast.IExpression[],Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new object expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.ObjectExpression.Values">
            <summary>
            Gets the contained expressions.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ObjectExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ObjectExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.ParameterExpression">
            <summary>
            Represents an expression containing function parameters.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ParameterExpression.#ctor(Mages.Core.Ast.IExpression[],Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new parameter expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.ParameterExpression.Parameters">
            <summary>
            Gets the contained expressions.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.ParameterExpression.Names">
            <summary>
            Gets the available parameter names.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ParameterExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.ParameterExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.PostUnaryExpression">
            <summary>
            Base class for all post unary expressions.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.PostUnaryExpression.#ctor(Mages.Core.Ast.IExpression,Mages.Core.TextPosition,System.String)">
            <summary>
            Creates a new post unary expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.PostUnaryExpression.Value">
            <summary>
            Gets the used value.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.PostUnaryExpression.Operator">
            <summary>
            Gets the operator string.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.PostUnaryExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.PostUnaryExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.PreUnaryExpression">
            <summary>
            Base class for all pre unary expressions.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.PreUnaryExpression.#ctor(Mages.Core.TextPosition,Mages.Core.Ast.IExpression,System.String)">
            <summary>
            Creates a new pre unary expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.PreUnaryExpression.Value">
            <summary>
            Gets the used value.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.PreUnaryExpression.Operator">
            <summary>
            Gets the operator string.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.PreUnaryExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.PreUnaryExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.PropertyExpression">
            <summary>
            Represents a property (name-value pair) of an object.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.PropertyExpression.#ctor(Mages.Core.Ast.IExpression,Mages.Core.Ast.IExpression)">
            <summary>
            Creates a new property.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.PropertyExpression.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.PropertyExpression.Value">
            <summary>
            Gets the value of the property.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.PropertyExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.PropertyExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.RangeExpression">
            <summary>
            The range expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.RangeExpression.#ctor(Mages.Core.Ast.IExpression,Mages.Core.Ast.IExpression,Mages.Core.Ast.IExpression)">
            <summary>
            Creates a new range expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.RangeExpression.From">
            <summary>
            Gets the from expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.RangeExpression.To">
            <summary>
            Gets the to expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.RangeExpression.Step">
            <summary>
            Gets the step expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.RangeExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.RangeExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Expressions.VariableExpression">
            <summary>
            Represents the access of a variable.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.VariableExpression.#ctor(System.String,Mages.Core.Ast.AbstractScope,Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new variable expression.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.VariableExpression.Name">
            <summary>
            Gets the name of the variable.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Expressions.VariableExpression.Scope">
            <summary>
            Gets the assigned abstract scope.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.VariableExpression.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Expressions.VariableExpression.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.IExpression">
            <summary>
            An abstract expression from the AST.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.IExpression.IsAssignable">
            <summary>
            Gets if the expression can be used as a value container.
            </summary>
        </member>
        <member name="T:Mages.Core.Ast.IParser">
            <summary>
            Represents the core parser interface.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.IParser.ParseExpression(System.Collections.Generic.IEnumerator{Mages.Core.Tokens.IToken})">
            <summary>
            Parses the next expression.
            </summary>
            <param name="tokens">The stream of tokens.</param>
            <returns>The parsed expression.</returns>
        </member>
        <member name="M:Mages.Core.Ast.IParser.ParseStatement(System.Collections.Generic.IEnumerator{Mages.Core.Tokens.IToken})">
            <summary>
            Parses the next statement.
            </summary>
            <param name="tokens">The stream of tokens.</param>
            <returns>The parsed statement.</returns>
        </member>
        <member name="M:Mages.Core.Ast.IParser.ParseStatements(System.Collections.Generic.IEnumerator{Mages.Core.Tokens.IToken})">
            <summary>
            Parse the next statements.
            </summary>
            <param name="tokens">The stream of tokens.</param>
            <returns>The parsed statements.</returns>
        </member>
        <member name="T:Mages.Core.Ast.IStatement">
            <summary>
            An abstract statement from the AST.
            </summary>
        </member>
        <member name="T:Mages.Core.Ast.ITreeWalker">
            <summary>
            Represents a syntax tree walker.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Statements.VarStatement)">
            <summary>
            Visits the given statement.
            </summary>
            <param name="statement">Variable statement.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Statements.BlockStatement)">
            <summary>
            Visits the given statement.
            </summary>
            <param name="statement">Block statement.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Statements.SimpleStatement)">
            <summary>
            Visits the given statement.
            </summary>
            <param name="statement">Simple statement.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Statements.ReturnStatement)">
            <summary>
            Visits the given statement.
            </summary>
            <param name="statement">Return statement.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Statements.WhileStatement)">
            <summary>
            Visits the given statement.
            </summary>
            <param name="statement">While statement.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Statements.ForStatement)">
            <summary>
            Visits the given statement.
            </summary>
            <param name="statement">For statement.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Statements.IfStatement)">
            <summary>
            Visits the given statement.
            </summary>
            <param name="statement">If statement.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Statements.MatchStatement)">
            <summary>
            Visits the given statement.
            </summary>
            <param name="statement">Match statement.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Statements.CaseStatement)">
            <summary>
            Visits the given statement.
            </summary>
            <param name="statement">Case statement.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Statements.ContinueStatement)">
            <summary>
            Visits the given statement.
            </summary>
            <param name="statement">Continue statement.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Statements.BreakStatement)">
            <summary>
            Visits the given statement.
            </summary>
            <param name="statement">Break statement.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.EmptyExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Empty expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.ConstantExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Constant expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.InterpolatedExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Interpolated expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.ArgumentsExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Arguments expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.AssignmentExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Assignment expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.BinaryExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Binary expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.PreUnaryExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Pre-unary expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.PostUnaryExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Post-unary expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.RangeExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Range expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.ConditionalExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Conditional expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.CallExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Call expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.ObjectExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Object expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.PropertyExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Property expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.MatrixExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Matrix expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.FunctionExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Function expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.InvalidExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Invalid expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.IdentifierExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Identifier expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.MemberExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Member expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.ParameterExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Parameter expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.VariableExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Variable expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.DeleteExpression)">
            <summary>
            Visits the given expression.
            </summary>
            <param name="expression">Delete expression.</param>
        </member>
        <member name="M:Mages.Core.Ast.ITreeWalker.Visit(Mages.Core.Ast.Expressions.AwaitExpression)">
            <summary>
            Visits the given experssion.
            </summary>
            <param name="expression">Await expression.</param>
        </member>
        <member name="T:Mages.Core.Ast.IValidatable">
            <summary>
            Represents a part of the AST that can be validated.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.IValidatable.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.IValidationContext">
            <summary>
            Represents the validation context.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.IValidationContext.IsInLoop">
            <summary>
            Gets if the current element is nested in a loop.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.IValidationContext.Report(Mages.Core.ParseError)">
            <summary>
            Adds an error to the validation context.
            </summary>
            <param name="error">The error to add.</param>
        </member>
        <member name="T:Mages.Core.Ast.IWalkable">
            <summary>
            Represents a part of the AST that can be walked.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.IWalkable.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="T:Mages.Core.Ast.ParserExtensions">
            <summary>
            A set of useful extensions for parsing.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.ParserExtensions.ParseExpression(Mages.Core.Ast.IParser,System.String)">
            <summary>
            Parse the expression given in form of a string.
            </summary>
            <param name="parser">The parser.</param>
            <param name="code">The code to parse.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Mages.Core.Ast.ParserExtensions.ParseStatement(Mages.Core.Ast.IParser,System.String)">
            <summary>
            Parse the statement given in form of a string.
            </summary>
            <param name="parser">The parser.</param>
            <param name="code">The code to parse.</param>
            <returns>The resulting statement.</returns>
        </member>
        <member name="M:Mages.Core.Ast.ParserExtensions.ParseStatements(Mages.Core.Ast.IParser,System.String)">
            <summary>
            Parse the statements given in form of a string.
            </summary>
            <param name="parser">The parser.</param>
            <param name="code">The code to parse.</param>
            <returns>The resulting statements.</returns>
        </member>
        <member name="T:Mages.Core.Ast.StatementExtensions">
            <summary>
            A collection of statement extensions.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.StatementExtensions.FindMissingSymbols(Mages.Core.Ast.IStatement)">
            <summary>
            Looks for missing symbols in the provided statement.
            </summary>
            <param name="statement">The statement.</param>
            <returns>The found list of missing symbols.</returns>
        </member>
        <member name="M:Mages.Core.Ast.StatementExtensions.FindMissingSymbols(System.Collections.Generic.IEnumerable{Mages.Core.Ast.IStatement})">
            <summary>
            Looks for missing symbols in the provided statements.
            </summary>
            <param name="statements">The statements.</param>
            <returns>The found list of missing symbols.</returns>
        </member>
        <member name="M:Mages.Core.Ast.StatementExtensions.ToBlock(System.Collections.Generic.IEnumerable{Mages.Core.Ast.IStatement})">
            <summary>
            Converts the given statements to a single block statement.
            </summary>
            <param name="statements">The statements.</param>
            <returns>The single block statement containing all statements.</returns>
        </member>
        <member name="M:Mages.Core.Ast.StatementExtensions.CollectMissingSymbols(Mages.Core.Ast.IStatement,System.Collections.Generic.List{Mages.Core.Ast.Expressions.VariableExpression})">
            <summary>
            Collects the missing symbols in the provided statement.
            </summary>
            <param name="statement">The statement.</param>
            <param name="missingSymbols">The list of missing symbols to populate.</param>
        </member>
        <member name="M:Mages.Core.Ast.StatementExtensions.MakeRunnable(System.Collections.Generic.IEnumerable{Mages.Core.Ast.IStatement})">
            <summary>
            Transforms the statements to an array of operations.
            </summary>
            <param name="statements">The statements.</param>
            <returns>The operations that can be run.</returns>
        </member>
        <member name="M:Mages.Core.Ast.StatementExtensions.IsEmpty(Mages.Core.Ast.IStatement)">
            <summary>
            Checks if the given statement is a simple statement containing
            an empty expression.
            </summary>
            <param name="statement">The statement.</param>
            <returns>True if the statement is empty, otherwise false.</returns>
        </member>
        <member name="M:Mages.Core.Ast.StatementExtensions.IsEmpty(Mages.Core.Ast.IExpression)">
            <summary>
            Checks if the given expression is an empty expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>True if the expression is empty, otherwise false.</returns>
        </member>
        <member name="M:Mages.Core.Ast.StatementExtensions.GetCompletionAt(System.Collections.Generic.IEnumerable{Mages.Core.Ast.IStatement},Mages.Core.TextPosition,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the list of possible completions at the given position.
            </summary>
            <param name="statements">The statements.</param>
            <param name="position">The position to look for completions.</param>
            <param name="symbols">The existing global symbols.</param>
            <returns>The list of completions for the given position.</returns>
        </member>
        <member name="T:Mages.Core.Ast.Statements.BaseStatement">
            <summary>
            Represents the shared core of all statements.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.BaseStatement.#ctor(Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new statement.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.BaseStatement.Start">
            <summary>
            Gets the start position of the statement.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.BaseStatement.End">
            <summary>
            Gets the end position of the statement.
            </summary>
        </member>
        <member name="T:Mages.Core.Ast.Statements.BlockStatement">
            <summary>
            Represents a block of statements.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.BlockStatement.#ctor(Mages.Core.Ast.IStatement[],Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new block statement.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.BlockStatement.Statements">
            <summary>
            Gets the contained statements.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.BlockStatement.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="M:Mages.Core.Ast.Statements.BlockStatement.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="T:Mages.Core.Ast.Statements.BreakableStatement">
            <summary>
            Represents a breakable statement.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.BreakableStatement.#ctor(Mages.Core.Ast.IStatement,Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new breakable statement.
            </summary>
            <param name="body">The body to use.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
        </member>
        <member name="P:Mages.Core.Ast.Statements.BreakableStatement.Body">
            <summary>
            Gets the stored body.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.BreakableStatement.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Statements.BreakStatement">
            <summary>
            Represents a break statement.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.BreakStatement.#ctor(Mages.Core.Ast.IExpression,Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new break statement with the given payload.
            </summary>
            <param name="expression">The payload.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
        </member>
        <member name="M:Mages.Core.Ast.Statements.BreakStatement.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Statements.BreakStatement.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Statements.CaseStatement">
            <summary>
            Represents an case statement.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.CaseStatement.#ctor(Mages.Core.Ast.IExpression,Mages.Core.Ast.IStatement)">
            <summary>
            Creates a new case statement.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.CaseStatement.Condition">
            <summary>
            Gets the stored condition.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.CaseStatement.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="T:Mages.Core.Ast.Statements.ContinueStatement">
            <summary>
            Represents a continue statement.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.ContinueStatement.#ctor(Mages.Core.Ast.IExpression,Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new continue statement with the given payload.
            </summary>
            <param name="expression">The payload.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
        </member>
        <member name="M:Mages.Core.Ast.Statements.ContinueStatement.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Statements.ContinueStatement.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Statements.ForStatement">
            <summary>
            Represents a for statement.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.ForStatement.#ctor(System.Boolean,Mages.Core.Ast.IExpression,Mages.Core.Ast.IExpression,Mages.Core.Ast.IExpression,Mages.Core.Ast.IStatement,Mages.Core.TextPosition)">
            <summary>
            Creates a new for statement.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.ForStatement.IsDeclared">
            <summary>
            Gets if the initialization variable is declared.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.ForStatement.Initialization">
            <summary>
            Gets the stored initialization.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.ForStatement.Condition">
            <summary>
            Gets the stored condition.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.ForStatement.AfterThought">
            <summary>
            Gets the stored after thought.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.ForStatement.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="T:Mages.Core.Ast.Statements.IfStatement">
            <summary>
            Represents an if statement.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.IfStatement.#ctor(Mages.Core.Ast.IExpression,Mages.Core.Ast.IStatement,Mages.Core.Ast.IStatement,Mages.Core.TextPosition)">
            <summary>
            Creates a new if statement.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.IfStatement.Condition">
            <summary>
            Gets the stored condition.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.IfStatement.Primary">
            <summary>
            Gets the primary statement.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.IfStatement.Secondary">
            <summary>
            Gets the secondary statement.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.IfStatement.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Statements.IfStatement.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Statements.MatchStatement">
            <summary>
            Represents an match statement.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.MatchStatement.#ctor(Mages.Core.Ast.IExpression,Mages.Core.Ast.IStatement,Mages.Core.TextPosition)">
            <summary>
            Creates a new match statement.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.MatchStatement.Reference">
            <summary>
            Gets the stored reference.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.MatchStatement.Cases">
            <summary>
            Gets the associated cases.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.MatchStatement.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Statements.MatchStatement.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Statements.ReturnStatement">
            <summary>
            Represents a return statement.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.ReturnStatement.#ctor(Mages.Core.Ast.IExpression,Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new return statement with the given payload.
            </summary>
            <param name="expression">The payload to transport.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
        </member>
        <member name="P:Mages.Core.Ast.Statements.ReturnStatement.Expression">
            <summary>
            Gets the stored payload.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.ReturnStatement.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="M:Mages.Core.Ast.Statements.ReturnStatement.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Statements.SimpleStatement">
            <summary>
            Represents a simple statement containing an expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.SimpleStatement.#ctor(Mages.Core.Ast.IExpression,Mages.Core.TextPosition)">
            <summary>
            Creates a new simple statement.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.SimpleStatement.Expression">
            <summary>
            Gets the contained expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.SimpleStatement.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="M:Mages.Core.Ast.Statements.SimpleStatement.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="T:Mages.Core.Ast.Statements.VarStatement">
            <summary>
            Represents a "var ...;" statement.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.VarStatement.#ctor(Mages.Core.Ast.IExpression,Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Creates a new var statement.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.VarStatement.Assignment">
            <summary>
            Gets the associated assignment.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.VarStatement.Validate(Mages.Core.Ast.IValidationContext)">
            <summary>
            Validates the expression with the given context.
            </summary>
            <param name="context">The validator to report errors to.</param>
        </member>
        <member name="M:Mages.Core.Ast.Statements.VarStatement.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="T:Mages.Core.Ast.Statements.WhileStatement">
            <summary>
            Represents a while statement.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.WhileStatement.#ctor(Mages.Core.Ast.IExpression,Mages.Core.Ast.IStatement,Mages.Core.TextPosition)">
            <summary>
            Creates a new while statement.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Statements.WhileStatement.Condition">
            <summary>
            Gets the stored condition.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Statements.WhileStatement.Accept(Mages.Core.Ast.ITreeWalker)">
            <summary>
            Accepts the visitor by showing him around.
            </summary>
            <param name="visitor">The visitor walking the tree.</param>
        </member>
        <member name="T:Mages.Core.Ast.Walkers.BaseTreeWalker">
            <summary>
            A basic tree walker to focus on what's really important.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Statements.VarStatement)">
            <summary>
            Visits a var statement - accepts the assignment.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Statements.BlockStatement)">
            <summary>
            Visits a block statement - accepts all childs.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Statements.SimpleStatement)">
            <summary>
            Visits a simple statement - accepts the expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Statements.ReturnStatement)">
            <summary>
            Visits a return statement - accepts the payload.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.DeleteExpression)">
            <summary>
            Visits a delete expression - accepts the payload.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Statements.WhileStatement)">
            <summary>
            Visits a while statement - accepts the condition and body.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Statements.ForStatement)">
            <summary>
            Visits a for statement - accepts the initialization, condition, afterthought, and body.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Statements.IfStatement)">
            <summary>
            Visits an if statement - accepts the condition and body.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Statements.MatchStatement)">
            <summary>
            Visits a match statement - accepts the condition and body.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Statements.CaseStatement)">
            <summary>
            Visits a case statement - accepts the condition and body.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Statements.ContinueStatement)">
            <summary>
            Visits a continue statement.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Statements.BreakStatement)">
            <summary>
            Visits a break statement.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.EmptyExpression)">
            <summary>
            Visits an empty expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.ConstantExpression)">
            <summary>
            Visits a constant expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.AwaitExpression)">
            <summary>
            Visits an awaitable expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.ArgumentsExpression)">
            <summary>
            Visits an arguments expression - accepts all arguments.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.AssignmentExpression)">
            <summary>
            Visits an assignment expression - accepts the variable and value.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.BinaryExpression)">
            <summary>
            Visits a binary expression - accepts the left and right value.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.InterpolatedExpression)">
            <summary>
            Visits an interpolated string - accepts the format and replacements.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.PreUnaryExpression)">
            <summary>
            Visits a pre-unary expression - accepts the value.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.PostUnaryExpression)">
            <summary>
            Visits a post-unary expression - accepts the value.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.RangeExpression)">
            <summary>
            Visits a range expression - accepts the from, step. and to.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.ConditionalExpression)">
            <summary>
            Visits a conditional expression - accepts the condition, primary, and secondary.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.CallExpression)">
            <summary>
            Visits a call expression - accepts the function and arguments.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.ObjectExpression)">
            <summary>
            Visits an object expression - accepts all values.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.PropertyExpression)">
            <summary>
            Visits a property expression - accepts the name and value.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.MatrixExpression)">
            <summary>
            Visits a matrix expression - accepts all values.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.FunctionExpression)">
            <summary>
            Visits a function expression - accepts the parameters and body.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.InvalidExpression)">
            <summary>
            Visits an invalid expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.IdentifierExpression)">
            <summary>
            Visits an identifier expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.MemberExpression)">
            <summary>
            Visits a member expression - accepts the object and member.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.ParameterExpression)">
            <summary>
            Visits a parameter expression - accepts all parameters.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.BaseTreeWalker.Visit(Mages.Core.Ast.Expressions.VariableExpression)">
            <summary>
            Visits a variable expression.
            </summary>
        </member>
        <member name="T:Mages.Core.Ast.Walkers.CompletionTreeWalker">
            <summary>
            Represents the walker to get code completion information.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.CompletionTreeWalker.#ctor(Mages.Core.TextPosition,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new completition tree walker for the given position.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Walkers.CompletionTreeWalker.Suggestions">
            <summary>
            Gets the list of autocomplete suggestions.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.CompletionTreeWalker.FindSuggestions(System.Collections.Generic.IEnumerable{Mages.Core.Ast.IStatement})">
            <summary>
            Finds the suggestions for the given list of statements.
            </summary>
            <param name="statements">The statements to use.</param>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.CompletionTreeWalker.Visit(Mages.Core.Ast.Statements.BlockStatement)">
            <summary>
            Visits a block statement - accepts all childs.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.CompletionTreeWalker.Visit(Mages.Core.Ast.Statements.VarStatement)">
            <summary>
            Visits a var statement - accepts the assignment.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.CompletionTreeWalker.Visit(Mages.Core.Ast.Statements.SimpleStatement)">
            <summary>
            Visits a simple statement - accepts the expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.CompletionTreeWalker.Visit(Mages.Core.Ast.Expressions.EmptyExpression)">
            <summary>
            Visits an empty expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.CompletionTreeWalker.Visit(Mages.Core.Ast.Expressions.InvalidExpression)">
            <summary>
            Visits an invalid expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.CompletionTreeWalker.Visit(Mages.Core.Ast.Expressions.AssignmentExpression)">
            <summary>
            Visits an assignment expression - accepts the variable and value.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.CompletionTreeWalker.Visit(Mages.Core.Ast.Expressions.FunctionExpression)">
            <summary>
            Visits a function expression - accepts the parameters and body.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.CompletionTreeWalker.Visit(Mages.Core.Ast.Expressions.ParameterExpression)">
            <summary>
            Visits a parameter expression - accepts all parameters.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.CompletionTreeWalker.Visit(Mages.Core.Ast.Expressions.PropertyExpression)">
            <summary>
            Visits a property expression - accepts the name and value.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.CompletionTreeWalker.Visit(Mages.Core.Ast.Expressions.VariableExpression)">
            <summary>
            Visits a variable expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.CompletionTreeWalker.Visit(Mages.Core.Ast.Expressions.MemberExpression)">
            <summary>
            Visits a member expression.
            </summary>
        </member>
        <member name="T:Mages.Core.Ast.Walkers.OperationTreeWalker">
            <summary>
            Represents the walker to create operations.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.OperationTreeWalker.#ctor(System.Collections.Generic.List{Mages.Core.Vm.IOperation})">
            <summary>
            Creates a new operation tree walker.
            </summary>
            <param name="operations">The list of operations to populate.</param>
        </member>
        <member name="T:Mages.Core.Ast.Walkers.SerializeTreeWalker">
            <summary>
            Represents the walker to serialize the AST.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.SerializeTreeWalker.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a new serialization tree walker.
            </summary>
            <param name="writer">The destination to write to.</param>
        </member>
        <member name="T:Mages.Core.Ast.Walkers.SymbolTreeWalker">
            <summary>
            Represents the walker to gather symbol information.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.SymbolTreeWalker.#ctor">
            <summary>
            Creates a new symbol tree walker.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.SymbolTreeWalker.#ctor(System.Collections.Generic.IList{Mages.Core.Ast.Expressions.VariableExpression})">
            <summary>
            Creates a new symbol tree walker with a missing symbols collector.
            </summary>
            <param name="missing">The target for missing symbols.</param>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.SymbolTreeWalker.#ctor(System.Collections.Generic.IDictionary{Mages.Core.Ast.Expressions.VariableExpression,System.Collections.Generic.List{Mages.Core.Ast.Expressions.VariableExpression}},System.Collections.Generic.IList{Mages.Core.Ast.Expressions.VariableExpression})">
            <summary>
            Creates a new symbol tree walker with a new general and missing symbols collector.
            </summary>
            <param name="collector">The target for general symbol information.</param>
            <param name="missing">The target for missing symbols.</param>
        </member>
        <member name="P:Mages.Core.Ast.Walkers.SymbolTreeWalker.Missing">
            <summary>
            Gets the found potentially missing symbols.
            </summary>
        </member>
        <member name="P:Mages.Core.Ast.Walkers.SymbolTreeWalker.Symbols">
            <summary>
            Gets the found resolved symbols.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.SymbolTreeWalker.FindAllReferences(Mages.Core.Ast.Expressions.VariableExpression)">
            <summary>
            Finds all references of the given symbol.
            </summary>
            <param name="symbol">The variable to get references for.</param>
            <returns>The list of all references of the variable.</returns>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.SymbolTreeWalker.Visit(Mages.Core.Ast.Expressions.AssignmentExpression)">
            <summary>
            Visits the assignment expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.SymbolTreeWalker.Visit(Mages.Core.Ast.Expressions.FunctionExpression)">
            <summary>
            Visits the function expression.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.SymbolTreeWalker.Visit(Mages.Core.Ast.Expressions.VariableExpression)">
            <summary>
            Visits the variable expression.
            </summary>
        </member>
        <member name="T:Mages.Core.Ast.Walkers.ValidationTreeWalker">
            <summary>
            Represents the walker to validate the AST.
            </summary>
        </member>
        <member name="M:Mages.Core.Ast.Walkers.ValidationTreeWalker.#ctor(System.Collections.Generic.List{Mages.Core.ParseError})">
            <summary>
            Creates a new validation tree walker with the list of errors
            to populate.
            </summary>
            <param name="errors">The list to populate.</param>
        </member>
        <member name="T:Mages.Core.Configuration">
            <summary>
            Represents the configuration DTO.
            </summary>
        </member>
        <member name="P:Mages.Core.Configuration.Parser">
            <summary>
            Gets or sets the parser to use.
            </summary>
        </member>
        <member name="P:Mages.Core.Configuration.Scope">
            <summary>
            Gets or sets the scope to use.
            </summary>
        </member>
        <member name="P:Mages.Core.Configuration.IsThisAvailable">
            <summary>
            Gets or sets of a global 'this' referencing the scope should be created.
            </summary>
        </member>
        <member name="P:Mages.Core.Configuration.IsEvalForbidden">
            <summary>
            Gets or sets if the eval function is disallowed.
            </summary>
        </member>
        <member name="P:Mages.Core.Configuration.IsEngineExposed">
            <summary>
            Gets or sets if the engine itself is exposed.
            </summary>
        </member>
        <member name="T:Mages.Core.Engine">
            <summary>
            Represents the central engine for any kind of evaluation.
            </summary>
        </member>
        <member name="M:Mages.Core.Engine.#ctor(Mages.Core.Configuration)">
            <summary>
            Creates a new engine with the specified configuration. Otherwise a
            default configuration is used.
            </summary>
            <param name="configuration">The configuration to use.</param>
        </member>
        <member name="P:Mages.Core.Engine.Parser">
            <summary>
            Gets the used parser instance.
            </summary>
        </member>
        <member name="P:Mages.Core.Engine.Scope">
            <summary>
            Gets the used global scope.
            </summary>
        </member>
        <member name="P:Mages.Core.Engine.Globals">
            <summary>
            Gets the used global function layer.
            </summary>
        </member>
        <member name="P:Mages.Core.Engine.Version">
            <summary>
            Gets the version of the engine.
            </summary>
        </member>
        <member name="P:Mages.Core.Engine.Plugins">
            <summary>
            Gets the currently loaded plugins.
            </summary>
        </member>
        <member name="M:Mages.Core.Engine.AddPlugin(Mages.Core.Plugin)">
            <summary>
            Adds the given plugin to the list of plugins.
            </summary>
            <param name="plugin">The plugin to add.</param>
        </member>
        <member name="M:Mages.Core.Engine.RemovePlugin(Mages.Core.Plugin)">
            <summary>
            Removes the plugin from the list of plugins.
            </summary>
            <param name="plugin">The plugin to remove.</param>
        </member>
        <member name="M:Mages.Core.Engine.Compile(System.String)">
            <summary>
            Compiles the given source and returns a function to execute later.
            </summary>
            <param name="source">The source to compile.</param>
            <returns>The function to invoke later.</returns>
        </member>
        <member name="M:Mages.Core.Engine.Interpret(System.String)">
            <summary>
            Interprets the given source and returns the result, if any.
            </summary>
            <param name="source">The source to interpret.</param>
            <returns>The result if available, otherwise null.</returns>
        </member>
        <member name="T:Mages.Core.EngineExtensions">
            <summary>
            A collection of useful extensions for the engine.
            </summary>
        </member>
        <member name="M:Mages.Core.EngineExtensions.SetFunction(Mages.Core.Engine,System.String,Mages.Core.Function)">
            <summary>
            Adds or replaces a function with the given name to the function layer.
            </summary>
            <param name="engine">The engine.</param>
            <param name="name">The name of the function to add or replace.</param>
            <param name="function">The function to be integrated.</param>
        </member>
        <member name="M:Mages.Core.EngineExtensions.SetFunction(Mages.Core.Engine,System.String,System.Delegate)">
            <summary>
            Adds or replaces a function represented as a general delegate by wrapping
            it as a function with the given name.
            </summary>
            <param name="engine">The engine.</param>
            <param name="name">The name of the function to add or replace.</param>
            <param name="function">The function to be wrapped.</param>
        </member>
        <member name="M:Mages.Core.EngineExtensions.SetFunction(Mages.Core.Engine,System.String,System.Reflection.MethodInfo,System.Object)">
            <summary>
            Adds or replaces a function represented as a reflected method info by
            wrapping it as a function with the given name.
            </summary>
            <param name="engine">The engine.</param>
            <param name="name">The name of the function to add or replace.</param>
            <param name="method">The function to be wrapped.</param>
            <param name="target">The optional target object of the method.</param>
        </member>
        <member name="M:Mages.Core.EngineExtensions.SetConstant(Mages.Core.Engine,System.String,System.Object)">
            <summary>
            Adds or replaces an object represented as the MAGES primitive. This is
            either directly the given value or a wrapper around it.
            </summary>
            <param name="engine">The engine.</param>
            <param name="name">The name of the constant to add or replace.</param>
            <param name="value">The value to interact with.</param>
        </member>
        <member name="M:Mages.Core.EngineExtensions.SetStatic``1(Mages.Core.Engine)">
            <summary>
            Exposes all static methods and the type's constructors in the object
            that can be freely placed.
            </summary>
            <typeparam name="T">The type to expose.</typeparam>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:Mages.Core.EngineExtensions.SetStatic(Mages.Core.Engine,System.Type)">
            <summary>
            Exposes all static methods and the type's constructors in the object
            that can be freely placed.
            </summary>
            <param name="engine">The engine.</param>
            <param name="type">The type to expose.</param>
        </member>
        <member name="M:Mages.Core.EngineExtensions.SetStatic(Mages.Core.Engine,System.Reflection.Assembly,System.Predicate{System.Type})">
            <summary>
            Exposes all types in the assembly that satisfy the optional condition
            in an object that can be freely placed.
            </summary>
            <param name="engine">The engine.</param>
            <param name="lib">The library containing the types to expose.</param>
            <param name="shouldInclude">The optional inclusion checker.</param>
        </member>
        <member name="M:Mages.Core.EngineExtensions.SetStatic(Mages.Core.Engine,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Exposes all types in an object that can be freely placed. Here no
            default name is given.
            </summary>
            <param name="engine">The engine.</param>
            <param name="types">The types to include.</param>
        </member>
        <member name="M:Mages.Core.EngineExtensions.FindMissingSymbols(Mages.Core.Engine,System.String)">
            <summary>
            Finds the missing symbols (if any) in the given source.
            </summary>
            <param name="engine">The engine.</param>
            <param name="source">The source code to inspect.</param>
            <returns>The variable expressions pointing to the missing symbols.</returns>
        </member>
        <member name="M:Mages.Core.EngineExtensions.InterpretAsync(Mages.Core.Engine,System.String)">
            <summary>
            Interprets the given source and returns the result in form of a future.
            </summary>
            <param name="engine">The engine.</param>
            <param name="source">The source to interpret.</param>
            <returns>The result in form of a future. Any callbacks will be aggregated here.</returns>
        </member>
        <member name="M:Mages.Core.EngineExtensions.AddPlugin(Mages.Core.Engine,System.Type)">
            <summary>
            Adds a plugin from the given type. This requires that the type represents a
            static class that ends with "Plugin". Meta-data is given in form of public
            static string fields, while static properties and methods are considered
            content.
            </summary>
            <param name="engine">The engine.</param>
            <param name="type">The type to represent as a plugin.</param>
            <returns>The plugin if any.</returns>
        </member>
        <member name="M:Mages.Core.EngineExtensions.AddPlugins(Mages.Core.Engine,System.Reflection.Assembly)">
            <summary>
            Adds all plugins found in the given assembly.
            </summary>
            <param name="engine">The engine.</param>
            <param name="assembly">The assembly to investigate.</param>
            <returns>The list with all added plugins.</returns>
        </member>
        <member name="M:Mages.Core.EngineExtensions.GetGlobalSymbols(Mages.Core.Engine)">
            <summary>
            Gets the currently stored global symbols.
            </summary>
            <param name="engine">The engine containing the global symbols.</param>
            <returns>The enumeration over all global symbols.</returns>
        </member>
        <member name="M:Mages.Core.EngineExtensions.GetGlobalItems(Mages.Core.Engine)">
            <summary>
            Gets the currently stored global items, i.e., key-value pairs.
            </summary>
            <param name="engine">The engine containing the global scope.</param>
            <returns>The dictionary with all global items.</returns>
        </member>
        <member name="M:Mages.Core.EngineExtensions.GetCompletionAt(Mages.Core.Engine,System.String,System.Int32)">
            <summary>
            Looks up for completion at the given index in the provided source.
            </summary>
            <param name="engine">The engine.</param>
            <param name="source">The source code to use as basis.</param>
            <param name="index">The index where the cursor is.</param>
            <returns>The enumeration over potential completion symbols.</returns>
        </member>
        <member name="T:Mages.Core.ErrorCode">
            <summary>
            A list of possible parsing error codes.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.TerminatorExpected">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.IdentifierExpected">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.InvalidExpression">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.BlockNotTerminated">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.InvalidSymbol">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.ScientificMismatch">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.FloatingMismatch">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.BlockCommentNotTerminated">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.StringMismatch">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.EscapeSequenceInvalid">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.AsciiSequenceInvalid">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.UnicodeSequenceInvalid">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.OperandRequired">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.IncrementOperand">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.DecrementOperand">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.LeftOperandRequired">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.RightOperandRequired">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.RangeStartRequired">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.RangeStepError">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.RangeEndRequired">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.MemberInvalid">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.MatrixNotTerminated">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.ObjectNotTerminated">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.IndicesNotTerminated">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.BracketNotTerminated">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.BracketExpected">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.AssignableExpected">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.ExpressionExpected">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.StatementExpected">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.TooManyIndices">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.BranchMissing">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.KeywordUnexpected">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.ColonExpected">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.AssignmentValueRequired">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.MatrixColumnsDiscrepency">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.OpenGroupExpected">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.LoopMissing">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.OptionalArgumentRequired">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.CasesExpected">
            <summary>
            See description.
            </summary>
        </member>
        <member name="F:Mages.Core.ErrorCode.PlaceHolderNotEscaped">
            <summary>
            See description.
            </summary>
        </member>
        <member name="T:Mages.Core.Function">
            <summary>
            Defines the function delegate.
            </summary>
            <param name="args">The arguments to pass in.</param>
            <returns>The result of the evaluation.</returns>
        </member>
        <member name="T:Mages.Core.FunctionExtensions">
            <summary>
            A set of useful extensions for functions.
            </summary>
        </member>
        <member name="M:Mages.Core.FunctionExtensions.Call(Mages.Core.Function,System.Object[])">
            <summary>
            Calls the function with the given arguments.
            </summary>
            <param name="function">The function.</param>
            <param name="arguments">The arguments to supply.</param>
            <returns>The result of calling the function.</returns>
        </member>
        <member name="M:Mages.Core.FunctionExtensions.Call``1(Mages.Core.Function,System.Object[])">
            <summary>
            Calls the function with the given arguments.
            </summary>
            <typeparam name="TResult">The anticipated result type.</typeparam>
            <param name="function">The function.</param>
            <param name="arguments">The arguments to supply.</param>
            <returns>The result or the type's default value.</returns>
        </member>
        <member name="M:Mages.Core.FunctionExtensions.GetParameterNames(Mages.Core.Function)">
            <summary>
            Gets the names of the parameters of the function.
            </summary>
            <param name="function">The function to inspect.</param>
            <returns>The array with parameter names.</returns>
        </member>
        <member name="T:Mages.Core.IPlacement">
            <summary>
            Determines the placement of objects in the global scope.
            </summary>
        </member>
        <member name="M:Mages.Core.IPlacement.WithName(System.String)">
            <summary>
            Placed with the given name.
            </summary>
            <param name="name">The name to use.</param>
        </member>
        <member name="M:Mages.Core.IPlacement.WithDefaultName">
            <summary>
            Placed with the default name.
            </summary>
        </member>
        <member name="M:Mages.Core.IPlacement.Scattered">
            <summary>
            The children of the object are placed in the scope.
            </summary>
        </member>
        <member name="T:Mages.Core.ITextRange">
            <summary>
            Represents a range of characters within the source code.
            </summary>
        </member>
        <member name="P:Mages.Core.ITextRange.Start">
            <summary>
            Gets the start position of the token.
            </summary>
        </member>
        <member name="P:Mages.Core.ITextRange.End">
            <summary>
            Gets the end position of the token.
            </summary>
        </member>
        <member name="T:Mages.Core.Keywords">
            <summary>
            Contains all the reserved keywords.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.True">
            <summary>
            The true keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.False">
            <summary>
            The false keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Pi">
            <summary>
            The pi constant.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Var">
            <summary>
            The var keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Return">
            <summary>
            The return keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Let">
            <summary>
            The let keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Const">
            <summary>
            The const keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.For">
            <summary>
            The for keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.While">
            <summary>
            The while keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Do">
            <summary>
            The do keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Module">
            <summary>
            The module keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.If">
            <summary>
            The if keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Else">
            <summary>
            The else keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Break">
            <summary>
            The break keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Continue">
            <summary>
            The continue keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Yield">
            <summary>
            The yield keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Match">
            <summary>
            The match keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Async">
            <summary>
            The async keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Await">
            <summary>
            The await keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Class">
            <summary>
            The class keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Static">
            <summary>
            The static keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.New">
            <summary>
            The new keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.Delete">
            <summary>
            The delete keyword.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.GlobalStatementKeywords">
            <summary>
            Gets the globally available statement keywords.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.LoopControlKeywords">
            <summary>
            Gets the within-loop available statement keywords.
            </summary>
        </member>
        <member name="F:Mages.Core.Keywords.ExpressionKeywords">
            <summary>
            Gets the available expression keywords.
            </summary>
        </member>
        <member name="M:Mages.Core.Keywords.TryGetConstant(System.String,System.Object@)">
            <summary>
            Tries to get the constant's value.
            </summary>
            <param name="keyword">The name of the constant.</param>
            <param name="constant">The value of the constant.</param>
            <returns>True if the constant could be resolved, otherwise false.</returns>
        </member>
        <member name="M:Mages.Core.Keywords.IsKeyword(System.String)">
            <summary>
            Checks if the given identifier is actually a keyword.
            </summary>
            <param name="identifier">The identifier to check.</param>
            <returns>True if the identifier is a keyword, otherwise false.</returns>
        </member>
        <member name="T:Mages.Core.ParameterDefinition">
            <summary>
            Represents the definition of a function parameter.
            </summary>
        </member>
        <member name="M:Mages.Core.ParameterDefinition.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new parameter definition.
            </summary>
        </member>
        <member name="P:Mages.Core.ParameterDefinition.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Mages.Core.ParameterDefinition.IsRequired">
            <summary>
            Gets if the parameter is required.
            </summary>
        </member>
        <member name="M:Mages.Core.ParameterDefinition.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Mages.Core.ParameterDefinition.Equals(System.Object)">
            <summary>
            Checks for equality to the other object.
            </summary>
        </member>
        <member name="M:Mages.Core.ParameterDefinition.Equals(Mages.Core.ParameterDefinition)">
            <summary>
            Checks for equality to the other parameter definition.
            </summary>
        </member>
        <member name="T:Mages.Core.ParseError">
            <summary>
            A class to encapsulate data of a parse error.
            </summary>
        </member>
        <member name="M:Mages.Core.ParseError.#ctor(Mages.Core.ErrorCode,Mages.Core.ITextRange)">
            <summary>
            Creates a new parse error object with these properties.
            </summary>
            <param name="code">The code of the error.</param>
            <param name="range">The text range of the error.</param>
        </member>
        <member name="P:Mages.Core.ParseError.Start">
            <summary>
            Gets the start position of the error.
            </summary>
        </member>
        <member name="P:Mages.Core.ParseError.End">
            <summary>
            Gets the end position of the error.
            </summary>
        </member>
        <member name="P:Mages.Core.ParseError.Code">
            <summary>
            Gets the code of the error.
            </summary>
        </member>
        <member name="T:Mages.Core.ParseException">
            <summary>
            Represents the exception that is thrown on trying
            to interpret invalid code.
            </summary>
        </member>
        <member name="M:Mages.Core.ParseException.#ctor(Mages.Core.ParseError)">
            <summary>
            Creates a new parse exception.
            </summary>
            <param name="error">The error that occured.</param>
        </member>
        <member name="P:Mages.Core.ParseException.Error">
            <summary>
            Gets the detected parse error.
            </summary>
        </member>
        <member name="T:Mages.Core.Plugin">
            <summary>
            Defines the plugin essentials.
            </summary>
        </member>
        <member name="M:Mages.Core.Plugin.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new plugin.
            </summary>
        </member>
        <member name="P:Mages.Core.Plugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
        </member>
        <member name="P:Mages.Core.Plugin.MetaData">
            <summary>
            Gets the plugin's meta data.
            </summary>
        </member>
        <member name="P:Mages.Core.Plugin.Content">
            <summary>
            Gets the plugin's content.
            </summary>
        </member>
        <member name="T:Mages.Core.Runtime.Container">
            <summary>
            A global accessible container for engine-independent services.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Container.Register``1(``0)">
            <summary>
            Registers the specified service in the container.
            </summary>
            <typeparam name="T">The type of service to set.</typeparam>
            <param name="service">The service to register.</param>
            <returns>The optional lifetime controlling instance.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Container.Unregister``1(``0)">
            <summary>
            Unregisters the specified service from the container.
            </summary>
            <typeparam name="T">The type of service to remove.</typeparam>
            <param name="service">The service to remove.</param>
            <returns>True if the service was removed, otherwise false.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Container.Unregister``1">
            <summary>
            Unregisters the specified service from the container.
            </summary>
            <typeparam name="T">The type of service to remove.</typeparam>
            <returns>The removed services, if any.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Container.GetService``1(``0)">
            <summary>
            Tries to get the specified service from the container.
            </summary>
            <typeparam name="T">The type of service to get.</typeparam>
            <param name="defaultValue">The optional default instance.</param>
            <returns>The service or a default instance.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Container.GetAllServices``1">
            <summary>
            Tries to get the specified services from the container.
            </summary>
            <typeparam name="T">The type of service to get.</typeparam>
            <returns>The services.</returns>
        </member>
        <member name="T:Mages.Core.Runtime.Converters.ConverterExtensions">
            <summary>
            A set of useful extension methods for type conversions.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToType(System.Object)">
            <summary>
            Returns the type of the given value.
            </summary>
            <param name="value">The value to get the type of.</param>
            <returns>The MAGES type string.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.To(System.Object,System.String)">
            <summary>
            Converts the given value to the specified type.
            </summary>
            <param name="value">The type to convert.</param>
            <param name="type">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToBoolean(System.Object)">
            <summary>
            Returns the boolean representation of the given value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The boolean representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToBoolean(System.Double)">
            <summary>
            Returns the boolean representation of the given numeric value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The boolean representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToBoolean(System.String)">
            <summary>
            Returns the boolean representation of the given string value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The boolean representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToBoolean(System.Double[0:,0:])">
            <summary>
            Returns the boolean representation of the given matrix value.
            </summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>The boolean representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToBoolean(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns the boolean representation of the given object value.
            </summary>
            <param name="obj">The obj to convert.</param>
            <returns>The boolean representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToObject(System.Object)">
            <summary>
            Returns the object representation of the given value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The object representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToNumber(System.Object)">
            <summary>
            Returns the number representation of the given value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The number representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToNumber(System.Boolean)">
            <summary>
            Returns the number representation of the given boolean value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The number representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToNumber(System.String)">
            <summary>
            Returns the number representation of the given string value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The number representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToNumber(System.Double[0:,0:])">
            <summary>
            Returns the number representation of the given matrix value.
            </summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>The number representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToMatrix(System.Double)">
            <summary>
            Returns the matrix representation of the given number value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The matrix representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToMatrix(System.Boolean)">
            <summary>
            Returns the matrix representation of the given boolean value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The matrix representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToMatrix(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the matrix representation of the given numeric values.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The matrix representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToMatrix(System.Collections.Generic.List{System.Double})">
            <summary>
            Returns the matrix representation of the given numeric values.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The matrix representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToVector(System.Double[0:,0:])">
            <summary>
            Returns the vector representation of the given matrix value.
            </summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>The matrix representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.ToList(System.Double[0:,0:])">
            <summary>
            Returns the list representation of the given matrix value.
            </summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>The list representation of the value.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.ConverterExtensions.TryGetIndex(System.Object,System.Int32@)">
            <summary>
            Tries to get the index supplied from the given object.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="value">The retrieved index.</param>
            <returns>True if the index could be retrieved, otherwise false.</returns>
        </member>
        <member name="T:Mages.Core.Runtime.Converters.INameSelector">
            <summary>
            Represents the interface to handle name selections.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Converters.INameSelector.Select(System.Collections.Generic.IEnumerable{System.String},System.Reflection.MemberInfo)">
            <summary>
            Selects a name for the given member.
            </summary>
            <param name="registered">The already registered names.</param>
            <param name="member">The member to give a MAGES name.</param>
            <returns>The selected name.</returns>
        </member>
        <member name="T:Mages.Core.Runtime.EntryChangedArgs">
            <summary>
            Contains the event data for changes observed in a dictionary.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.EntryChangedArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Creates a new event data container.
            </summary>
        </member>
        <member name="P:Mages.Core.Runtime.EntryChangedArgs.Key">
            <summary>
            Gets the key that changed.
            </summary>
        </member>
        <member name="P:Mages.Core.Runtime.EntryChangedArgs.OldValue">
            <summary>
            Gets the previously assigned value, if any.
            </summary>
        </member>
        <member name="P:Mages.Core.Runtime.EntryChangedArgs.NewValue">
            <summary>
            Gets the currently assigned value, if any.
            </summary>
        </member>
        <member name="T:Mages.Core.Runtime.Functions.AttachedProperties">
            <summary>
            The collection of all attached properties.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.AttachedProperties.Register``1(System.String,System.Func{``0,System.Object})">
            <summary>
            Registers the provided attached property.
            </summary>
            <typeparam name="T">The type of the object to extend.</typeparam>
            <param name="name">The name of the property to attach.</param>
            <param name="getter">The getter function to register.</param>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.AttachedProperties.Unregister``1(System.String)">
            <summary>
            Unregisters the provided attached property.
            </summary>
            <typeparam name="T">The type of the object to extend.</typeparam>
            <param name="name">The name of the property to detach.</param>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.AttachedProperties.TryFind(System.Object,System.String,System.Object@)">
            <summary>
            Tries to find the value for the attached property.
            </summary>
            <param name="instance">The object context.</param>
            <param name="name">The name of the property to retrieve.</param>
            <param name="value">The potentially attached property value.</param>
            <returns>True if the attached property could be found, otherwise false.</returns>
        </member>
        <member name="T:Mages.Core.Runtime.Functions.Curry">
            <summary>
            Provide helpers to enable currying.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.Curry.MinOne(Mages.Core.Function,System.Object[])">
            <summary>
            Checks if the provided args deliver at least one argument.
            Otherwise returns null.
            </summary>
            <param name="function">The function to return or capture.</param>
            <param name="args">The args to check and potentially capture.</param>
            <returns>A curried function or null.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.Curry.MinTwo(Mages.Core.Function,System.Object[])">
            <summary>
            Checks if the provided args deliver at least two arguments.
            Otherwise returns null.
            </summary>
            <param name="function">The function to return or capture.</param>
            <param name="args">The args to check and potentially capture.</param>
            <returns>A curried function or null.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.Curry.MinThree(Mages.Core.Function,System.Object[])">
            <summary>
            Checks if the provided args deliver at least three arguments.
            Otherwise returns null.
            </summary>
            <param name="function">The function to return or capture.</param>
            <param name="args">The args to check and potentially capture.</param>
            <returns>A curried function or null.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.Curry.Min(System.Int32,Mages.Core.Function,System.Object[])">
            <summary>
            Checks if the provided args deliver at least count argument(s).
            Otherwise returns null.
            </summary>
            <param name="count">The required number of arguments.</param>
            <param name="function">The function to return or capture.</param>
            <param name="args">The args to check and potentially capture.</param>
            <returns>A curried function or null.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.Curry.Shuffle(System.Object[])">
            <summary>
            Creates a function that shuffles the arguments of a given function
            according to the current arguments.
            </summary>
            <param name="args">The arguments to create the shuffle function.</param>
            <returns>The created shuffle function.</returns>
        </member>
        <member name="T:Mages.Core.Runtime.Functions.If">
            <summary>
            Helpers to check for argument types.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.If.Is``1(System.Object[],System.Func{``0,System.Object})">
            <summary>
            Checks if the first value of the given arguments is of type T.
            </summary>
            <typeparam name="T">The type T to check for.</typeparam>
            <param name="args">The arguments to check.</param>
            <param name="f">The callback to invoke if fulfilled.</param>
            <returns>The result of the callback or null.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.If.Is``2(System.Object[],System.Func{``0,``1,System.Object})">
            <summary>
            Checks if the first two values of the given arguments are of type
            T1 and T2.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="args">The arguments to check.</param>
            <param name="f">The callback to invoke if fulfilled.</param>
            <returns>The result of the callback or null.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.If.Is``3(System.Object[],System.Func{``0,``1,``2,System.Object})">
            <summary>
            Checks if the first three values of the given arguments are of type
            T1, T2, and T3.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="args">The arguments to check.</param>
            <param name="f">The callback to invoke if fulfilled.</param>
            <returns>The result of the callback or null.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.If.Is``4(System.Object[],System.Func{``0,``1,``2,``3,System.Object})">
            <summary>
            Checks if the first four values of the given arguments are of type
            T1, T2, T3, and T4.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="args">The arguments to check.</param>
            <param name="f">The callback to invoke if fulfilled.</param>
            <returns>The result of the callback or null.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.If.IsAnyT2``2(System.Object[],System.Func{``0,System.Object,``1,System.Object})">
            <summary>
            Checks if the first three values of the given arguments are of type
            T1, anything, and T3.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="args">The arguments to check.</param>
            <param name="f">The callback to invoke if fulfilled.</param>
            <returns>The result of the callback or null.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.If.IsNotNull``1(System.Object[],System.Func{System.Object,``0},System.Func{``0,``0,System.Object})">
            <summary>
            Checks if the provided args are all non-null. Performs the conversion and invokes
            the result if successful.
            </summary>
            <typeparam name="T">The type after the conversion.</typeparam>
            <param name="args">The arguments to check.</param>
            <param name="converter">The converter to use.</param>
            <param name="result">The result function to use.</param>
            <returns>The result or null if the check was not successful.</returns>
        </member>
        <member name="T:Mages.Core.Runtime.Functions.Procedure">
            <summary>
            Defines a procedure to set values.
            </summary>
            <param name="arguments">The index arguments.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Mages.Core.Runtime.Functions.StandardFunctions">
            <summary>
            The collection of all standard functions.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Add">
            <summary>
            Exposes the + operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Sub">
            <summary>
            Exposes the - operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Mul">
            <summary>
            Exposes the * operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.RDiv">
            <summary>
            Exposes the / operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.LDiv">
            <summary>
            Exposes the \ operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Pow">
            <summary>
            Exposes the ^ operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Mod">
            <summary>
            Exposes the % operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.And">
            <summary>
            Exposes the &amp;&amp; operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Or">
            <summary>
            Exposes the || operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Eq">
            <summary>
            Exposes the == operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Neq">
            <summary>
            Exposes the != operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Gt">
            <summary>
            Exposes the &gt; operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Geq">
            <summary>
            Exposes the &gt;= operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Lt">
            <summary>
            Exposes the &lt; operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Leq">
            <summary>
            Exposes the &lt;= operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Pipe">
            <summary>
            Exposes the | operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Not">
            <summary>
            Exposes the ~ operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Positive">
            <summary>
            Exposes the + operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Negative">
            <summary>
            Exposes the - operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Factorial">
            <summary>
            Exposes the ! operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Transpose">
            <summary>
            Exposes the ' operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Abs">
            <summary>
            Wraps the Math.Abs function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Type">
            <summary>
            Exposes the &amp; operator as a function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Sqrt">
            <summary>
            Wraps the Math.Sqrt function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Sign">
            <summary>
            Wraps the Math.Sign function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Gamma">
            <summary>
            Contains the gamma function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Ceil">
            <summary>
            Wraps the Math.Ceiling function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Floor">
            <summary>
            Wraps the Math.Floor function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Round">
            <summary>
            Wraps the Math.Round function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Exp">
            <summary>
            Wraps the Math.Exp function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Log">
            <summary>
            Wraps the Math.Log function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Sin">
            <summary>
            Wraps the Math.Sin function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Cos">
            <summary>
            Wraps the Math.Cos function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Tan">
            <summary>
            Wraps the Math.Tan function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Cot">
            <summary>
            Contains the cot function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Sec">
            <summary>
            Contains the sec function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Csc">
            <summary>
            Contains the csc function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Sinh">
            <summary>
            Wraps the Math.Sinh function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Cosh">
            <summary>
            Wraps the Math.Cosh function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Tanh">
            <summary>
            Wraps the Math.Tanh function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Coth">
            <summary>
            Contains the coth function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Sech">
            <summary>
            Contains the sech function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Csch">
            <summary>
            Contains the csch function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.ArcSin">
            <summary>
            Wraps the Math.Asin function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.ArcCos">
            <summary>
            Wraps the Math.Acos function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.ArcTan">
            <summary>
            Wraps the Math.Atan function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.ArcCot">
            <summary>
            Contains the arccot function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.ArcSec">
            <summary>
            Contains the asec function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.ArcCsc">
            <summary>
            Contains the acsc function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.ArSinh">
            <summary>
            Contains the arsinh function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.ArCosh">
            <summary>
            Contains the arcosh function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.ArTanh">
            <summary>
            Contains the artanh function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.ArCoth">
            <summary>
            Contains the arcoth function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.ArSech">
            <summary>
            Contains the asech function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.ArCsch">
            <summary>
            Contains the acsch function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Rand">
            <summary>
            Contains the random function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Throw">
            <summary>
            Contains the throw function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Catch">
            <summary>
            Contains the catch function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Length">
            <summary>
            Contains the length function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Sum">
            <summary>
            Contains the sum function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Min">
            <summary>
            Wraps the Math.Min function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Max">
            <summary>
            Wraps the Math.Max function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Sort">
            <summary>
            Wraps the Enumerable.OrderBy function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Reverse">
            <summary>
            Wraps the Enumerable.Reverse function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.IsNaN">
            <summary>
            Wraps the Double.IsNaN function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.IsInt">
            <summary>
            Contains the is integer function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.IsPrime">
            <summary>
            Contains the is prime function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.IsInfty">
            <summary>
            Wraps the Double.IsInfinity function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Any">
            <summary>
            Contains the any function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.All">
            <summary>
            Contains the all function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Is">
            <summary>
            Contains the is function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.As">
            <summary>
            Contains the as function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.List">
            <summary>
            Contains the list function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Keys">
            <summary>
            Contains the keys function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Map">
            <summary>
            Contains the map function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Reduce">
            <summary>
            Contains the reduce function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Where">
            <summary>
            Contains the where function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Zip">
            <summary>
            Contains the zip function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Concat">
            <summary>
            Contains the concat function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Intersection">
            <summary>
            Contains the intersection function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Union">
            <summary>
            Contains the union function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Except">
            <summary>
            Contains the except function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Format">
            <summary>
            Wraps the String.Format function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.HasKey">
            <summary>
            Contains the hasKey function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.GetValue">
            <summary>
            Contains the getValue function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Shuffle">
            <summary>
            Contains the shuffle function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Regex">
            <summary>
            Contains the regex function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Clip">
            <summary>
            Contains the clip function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Clamp">
            <summary>
            Contains the clamp function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardFunctions.Lerp">
            <summary>
            Contains the lerp function.
            </summary>
        </member>
        <member name="T:Mages.Core.Runtime.Functions.StandardOperators">
            <summary>
            The collection of all standard operators.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Add">
            <summary>
            Contains the add operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.And">
            <summary>
            Contains the and operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.LDiv">
            <summary>
            Contains the left division operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Mod">
            <summary>
            Contains the modulo operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Mul">
            <summary>
            Contains the multiplication operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Or">
            <summary>
            Contains the or operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Pow">
            <summary>
            Contains the power operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.RDiv">
            <summary>
            Contains the right division operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Sub">
            <summary>
            Contains the subtraction operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Eq">
            <summary>
            Contains the equality operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Neq">
            <summary>
            Contains the not equals operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Geq">
            <summary>
            Contains the greater or equals operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Gt">
            <summary>
            Contains the greater than operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Leq">
            <summary>
            Contains the less or equals operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Lt">
            <summary>
            Contains the less than operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Pipe">
            <summary>
            Contains the pipe operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Factorial">
            <summary>
            Contains the factorial function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Transpose">
            <summary>
            Contains the transpose operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Not">
            <summary>
            Contains the negation operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Positive">
            <summary>
            Contains the positive operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Negative">
            <summary>
            Contains the negative operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Abs">
            <summary>
            Wraps the Math.Abs function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Functions.StandardOperators.Type">
            <summary>
            Contains the type operator.
            </summary>
        </member>
        <member name="T:Mages.Core.Runtime.Functions.TypeFunctions">
            <summary>
            The collection of all type function creators.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.TypeFunctions.Register``1(System.Func{``0,Mages.Core.Function})">
            <summary>
            Registers the provided getter function.
            </summary>
            <typeparam name="T">The type of the object to extend.</typeparam>
            <param name="getter">The getter function to register.</param>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.TypeFunctions.Unregister``1">
            <summary>
            Unregisters the type function for the given type.
            </summary>
            <typeparam name="T">The type of object to unconfigure.</typeparam>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.TypeFunctions.TryFind(System.Object,Mages.Core.Function@)">
            <summary>
            Tries to find the named getter.
            </summary>
            <param name="instance">The object context.</param>
            <param name="function">The potentially found getter function.</param>
            <returns>True if the getter could be found, otherwise false.</returns>
        </member>
        <member name="T:Mages.Core.Runtime.Functions.TypeProcedures">
            <summary>
            The collection of all type function creators.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.TypeProcedures.Register``1(System.Func{``0,Mages.Core.Runtime.Functions.Procedure})">
            <summary>
            Registers the provided setter procedure.
            </summary>
            <typeparam name="T">The type of the object to extend.</typeparam>
            <param name="setter">The setter function to register.</param>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.TypeProcedures.Unregister``1">
            <summary>
            Unregisters the type function for the given type.
            </summary>
            <typeparam name="T">The type of object to unconfigure.</typeparam>
        </member>
        <member name="M:Mages.Core.Runtime.Functions.TypeProcedures.TryFind(System.Object,Mages.Core.Runtime.Functions.Procedure@)">
            <summary>
            Tries to find the named setter.
            </summary>
            <param name="instance">The object context.</param>
            <param name="procedure">The potentially found setter procedure.</param>
            <returns>True if the setter could be found, otherwise false.</returns>
        </member>
        <member name="T:Mages.Core.Runtime.Future">
            <summary>
            Represents an awaitable object definition.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Future.#ctor">
            <summary>
            Creates a new future object.
            </summary>
        </member>
        <member name="P:Mages.Core.Runtime.Future.IsCompleted">
            <summary>
            Gets if the result is already present.
            </summary>
        </member>
        <member name="P:Mages.Core.Runtime.Future.Result">
            <summary>
            Gets the result, if any.
            </summary>
        </member>
        <member name="P:Mages.Core.Runtime.Future.Error">
            <summary>
            Gets the error message, if any.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Future.SetResult(System.Object)">
            <summary>
            Sets the result in case of success.
            </summary>
            <param name="result">The concrete result, if any.</param>
        </member>
        <member name="M:Mages.Core.Runtime.Future.SetError(System.String)">
            <summary>
            Sets the error message in case of failure.
            </summary>
            <param name="error">The specific error message.</param>
        </member>
        <member name="M:Mages.Core.Runtime.Future.SetCallback(System.Action{System.Object,System.String})">
            <summary>
            Sets the callback to notify once finished. This function
            is immediately called if the result is already determined.
            </summary>
            <param name="callback">The callback action.</param>
        </member>
        <member name="T:Mages.Core.Runtime.ObservableDictionary">
            <summary>
            Represents the observable dictionary from MAGES.
            </summary>
        </member>
        <member name="E:Mages.Core.Runtime.ObservableDictionary.Changed">
            <summary>
            Fired once an element is added, removed, or updated.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.ObservableDictionary.#ctor">
            <summary>
            Creates a new observable dictionary with a standard container.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.ObservableDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new observable dictionary with the given container.
            </summary>
        </member>
        <member name="P:Mages.Core.Runtime.ObservableDictionary.Container">
            <summary>
            Gets the used container.
            </summary>
        </member>
        <member name="P:Mages.Core.Runtime.ObservableDictionary.Item(System.String)">
            <summary>
            Gets or sets the value at key.
            </summary>
        </member>
        <member name="P:Mages.Core.Runtime.ObservableDictionary.Count">
            <summary>
            Gets the number of items stored in the container.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.ObservableDictionary.Add(System.String,System.Object)">
            <summary>
            Adds the given key, value pair to the container.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.ObservableDictionary.Clear">
            <summary>
            Resets the container.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.ObservableDictionary.Remove(System.String)">
            <summary>
            Removes the given key from the container.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.ObservableDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to get the value at the given key.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.ObservableDictionary.OnChanged(System.String,System.Object,System.Object)">
            <summary>
            Called after something changed.
            </summary>
            <param name="key">The name of the changed entry.</param>
            <param name="oldValue">The entry's previous value.</param>
            <param name="newValue">The entry's new value.</param>
        </member>
        <member name="T:Mages.Core.Runtime.Stringify">
            <summary>
            Helpers to stringify objects used by MAGES.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Stringify.Default">
            <summary>
            Contains the stringify function.
            </summary>
        </member>
        <member name="F:Mages.Core.Runtime.Stringify.Json">
            <summary>
            Contains the JSON function.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Stringify.This(System.Double)">
            <summary>
            Converts the number to a string.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Stringify.This(System.Boolean)">
            <summary>
            Converts the boolean to a string.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Stringify.This(System.String)">
            <summary>
            Converts the string for output.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Stringify.This(System.Double[0:,0:])">
            <summary>
            Converts the matrix to a string.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Stringify.This(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts the object to a string.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Stringify.This(Mages.Core.Function)">
            <summary>
            Converts the function to a string.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Stringify.Undefined">
            <summary>
            Outputs the string for an undefined (null?) value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mages.Core.Runtime.Stringify.This(System.Object)">
            <summary>
            Converts the undetermined value to a string.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.Stringify.AsJson(System.Object)">
            <summary>
            Converts the given MAGES object to a JSON string.
            </summary>
            <param name="value">The object to represent.</param>
            <returns>The JSON representation.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Stringify.AsJson(System.String)">
            <summary>
            Converts the given string object to a JSON string.
            </summary>
            <param name="str">The string to represent.</param>
            <returns>The JSON representation.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.Stringify.AsJson(System.Double[0:,0:])">
            <summary>
            Converts the given matrix to a JSON string.
            </summary>
            <param name="matrix">The matrix to represent.</param>
            <returns>The JSON representation.</returns>
        </member>
        <member name="T:Mages.Core.Runtime.WrapperObject">
            <summary>
            Represents the object wrapper from MAGES.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.WrapperObject.#ctor(System.Object)">
            <summary>
            Creates a new wrapped instance object.
            </summary>
            <param name="content">The object to wrap.</param>
        </member>
        <member name="M:Mages.Core.Runtime.WrapperObject.#ctor(System.Type)">
            <summary>
            Creates a new wrapped static object.
            </summary>
            <param name="type">The type to wrap.</param>
        </member>
        <member name="M:Mages.Core.Runtime.WrapperObject.CreateFor(System.Object)">
            <summary>
            Creates a wrapper object for the given value.
            </summary>
            <param name="value">The value to inspect.</param>
            <returns>The wrapper or null dependent on the value.</returns>
        </member>
        <member name="P:Mages.Core.Runtime.WrapperObject.Content">
            <summary>
            Gets the wrapped object if instance bound.
            </summary>
        </member>
        <member name="P:Mages.Core.Runtime.WrapperObject.Type">
            <summary>
            Gets the type that is wrapped (instance or static).
            </summary>
        </member>
        <member name="P:Mages.Core.Runtime.WrapperObject.Item(System.String)">
            <summary>
            Gets or sets the value of the underlying object or
            the extension object.
            </summary>
            <param name="key">The name of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="P:Mages.Core.Runtime.WrapperObject.Count">
            <summary>
            Gets the number of properties of the underlying
            object and the extension object.
            </summary>
        </member>
        <member name="P:Mages.Core.Runtime.WrapperObject.Keys">
            <summary>
            Gets all the keys from the extension object.
            </summary>
        </member>
        <member name="P:Mages.Core.Runtime.WrapperObject.Values">
            <summary>
            Gets all the values from the extension object.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.WrapperObject.Add(System.String,System.Object)">
            <summary>
            Sets the provided value at the provided property.
            </summary>
            <param name="key">The name of the property.</param>
            <param name="value">The value to use.</param>
        </member>
        <member name="M:Mages.Core.Runtime.WrapperObject.Clear">
            <summary>
            Resets the extension object.
            </summary>
        </member>
        <member name="M:Mages.Core.Runtime.WrapperObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Checks if the underlying object or the extension
            object contains the given key.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the key is used, otherwise false.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.WrapperObject.ContainsKey(System.String)">
            <summary>
            Checks if the underlying object or the extension
            object contains the given key.
            </summary>
            <param name="key">The key to check for.</param>
            <returns>True if the key is used, otherwise false.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.WrapperObject.GetEnumerator">
            <summary>
            Gets the enumerator over the elements of the extension.
            </summary>
            <returns>The extension's enumerator.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.WrapperObject.Remove(System.String)">
            <summary>
            Removes the item from the extension.
            </summary>
            <param name="key">The key of the item to be removed.</param>
            <returns>True if it could be removed, otherwise false.</returns>
        </member>
        <member name="M:Mages.Core.Runtime.WrapperObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to get the value from the given key.
            </summary>
            <param name="key">The name of the property.</param>
            <param name="value">The resulting value.</param>
            <returns>True if the value could be retrieved, otherwise false.</returns>
        </member>
        <member name="T:Mages.Core.Source.CharacterTable">
            <summary>
            A set of special characters.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.End">
            <summary>
            The end of file Character -1.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Tilde">
            <summary>
            The tilde Character (~).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Pipe">
            <summary>
            The pipe Character (|).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.NullPtr">
            <summary>
            The null Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Ampersand">
            <summary>
            The ampersand Character (&amp;).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Hash">
            <summary>
            The number sign Character (#).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Dollar">
            <summary>
            The dollar sign Character ($).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.SemiColon">
            <summary>
            The semicolon sign (;).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Asterisk">
            <summary>
            The asterisk Character (*).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Equal">
            <summary>
            The equals sign (=).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Comma">
            <summary>
            The comma Character (,).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.FullStop">
            <summary>
            The full stop (.).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.CircumflexAccent">
            <summary>
            The circumflex accent (^) Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.At">
            <summary>
            The commercial at (@) Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.LessThan">
            <summary>
            The opening angle bracket (LESS-THAN-SIGN).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.GreaterThan">
            <summary>
            The closing angle bracket (GREATER-THAN-SIGN).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.SingleQuotationMark">
            <summary>
            The single quote / quotation mark (').
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.DoubleQuotationMark">
            <summary>
            The (double) quotation mark (").
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.CurvedQuotationMark">
            <summary>
            The (curved) quotation mark (`).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.QuestionMark">
            <summary>
            The question mark (?).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Tab">
            <summary>
            The tab Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.LineFeed">
            <summary>
            The line feed Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.CarriageReturn">
            <summary>
            The carriage return Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.FormFeed">
            <summary>
            The form feed Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Space">
            <summary>
            The space Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Slash">
            <summary>
            The slash (solidus, /) Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Backslash">
            <summary>
            The backslash (reverse-solidus, \) Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Colon">
            <summary>
            The colon (:) Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.ExclamationMark">
            <summary>
            The exlamation mark (!) Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Minus">
            <summary>
            The dash (hypen minus, -) Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Plus">
            <summary>
            The plus sign (+).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Lowline">
            <summary>
            The low line (_) Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Percent">
            <summary>
            The percent (%) Character.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.OpenBracket">
            <summary>
            Opening a round bracket (.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.CloseBracket">
            <summary>
            Closing a round bracket ).
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.OpenArray">
            <summary>
            Opening an array bracket [.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.CloseArray">
            <summary>
            Closing an array bracket ].
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.OpenScope">
            <summary>
            Opening a scope bracket {.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.CloseScope">
            <summary>
            Closing a scope bracket }.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.Zero">
            <summary>
            The number 0.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.One">
            <summary>
            The number 1.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.BigE">
            <summary>
            The letter E.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.BigI">
            <summary>
            The letter I.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.SmallA">
            <summary>
            The letter a.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.SmallB">
            <summary>
            The letter b.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.SmallE">
            <summary>
            The letter e.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.SmallF">
            <summary>
            The letter f.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.SmallI">
            <summary>
            The letter i.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.SmallN">
            <summary>
            The letter n.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.SmallR">
            <summary>
            The letter r.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.SmallT">
            <summary>
            The letter t.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.SmallU">
            <summary>
            The letter u.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.SmallV">
            <summary>
            The letter v.
            </summary>
        </member>
        <member name="F:Mages.Core.Source.CharacterTable.SmallX">
            <summary>
            The letter x.
            </summary>
        </member>
        <member name="T:Mages.Core.Source.IScanner">
            <summary>
            Represents the source code scanner.
            </summary>
        </member>
        <member name="P:Mages.Core.Source.IScanner.Current">
            <summary>
            Gets the current character code.
            </summary>
        </member>
        <member name="P:Mages.Core.Source.IScanner.Position">
            <summary>
            Gets the current position in the source code.
            </summary>
        </member>
        <member name="M:Mages.Core.Source.IScanner.MoveNext">
            <summary>
            Tries to move to the next position.
            </summary>
            <returns>True if the next character exists, otherwise false.</returns>
        </member>
        <member name="M:Mages.Core.Source.IScanner.MoveBack">
            <summary>
            Tries to move to the previous position.
            </summary>
            <returns>True if the previous character exists, otherwise false.</returns>
        </member>
        <member name="M:Mages.Core.Source.IScanner.GetPositionAt(System.Int32)">
            <summary>
            Gets the position at the given index.
            </summary>
            <param name="index">The linear index in the source.</param>
            <returns>The corresponding text position.</returns>
        </member>
        <member name="T:Mages.Core.Source.Specification">
            <summary>
            Specification helpers and extension methods.
            </summary>
        </member>
        <member name="M:Mages.Core.Source.Specification.FromHex(System.Int32)">
            <summary>
            Converts a given character from the hex representation (0-9A-Fa-f) to an integer.
            </summary>
            <param name="character">The character to convert.</param>
            <returns>The integer value or undefined behavior if invalid.</returns>
        </member>
        <member name="M:Mages.Core.Source.Specification.IsInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines if the given character is in the given range.
            </summary>
            <param name="character">The character to examine.</param>
            <param name="lower">The lower bound of the range.</param>
            <param name="upper">The upper bound of the range.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:Mages.Core.Source.Specification.IsUppercaseAscii(System.Int32)">
            <summary>
            Determines if the given character is a uppercase character (A-Z).
            </summary>
            <param name="character">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:Mages.Core.Source.Specification.IsLowercaseAscii(System.Int32)">
            <summary>
            Determines if the given character is a lowercase character (a-z).
            </summary>
            <param name="character">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:Mages.Core.Source.Specification.IsHex(System.Int32)">
            <summary>
            Determines if the given character is a hexadecimal (0-9a-fA-F).
            </summary>
            <param name="character">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:Mages.Core.Source.Specification.IsLetter(System.Int32)">
            <summary>
            Gets if the character is actually a (A-Z,a-z) letter.
            </summary>
            <param name="character">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:Mages.Core.Source.Specification.IsName(System.Int32)">
            <summary>
            Gets if the character is actually a name character.
            </summary>
            <param name="character">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:Mages.Core.Source.Specification.IsNameStart(System.Int32)">
            <summary>
            Determines if the given character is a valid character for starting an identifier.
            </summary>
            <param name="character">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:Mages.Core.Source.Specification.IsSpaceCharacter(System.Int32)">
            <summary>
            Determines if the given character is a white-space character.
            </summary>
            <param name="character">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:Mages.Core.Source.Specification.IsDigit(System.Int32)">
            <summary>
            Determines if the given character is a digit (0-9).
            </summary>
            <param name="character">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="T:Mages.Core.StringBuilderPool">
            <summary>
            A pool for recycled resources.
            </summary>
        </member>
        <member name="M:Mages.Core.StringBuilderPool.Pull">
            <summary>
            Either creates a fresh stringbuilder or gets a (cleaned) used one.
            </summary>
            <returns>A stringbuilder to use.</returns>
        </member>
        <member name="M:Mages.Core.StringBuilderPool.Stringify(System.Text.StringBuilder)">
            <summary>
            Returns the given stringbuilder to the pool and gets the current
            string content.
            </summary>
            <param name="sb">The stringbuilder to recycle.</param>
            <returns>The string that is contained in the stringbuilder.</returns>
        </member>
        <member name="T:Mages.Core.StringExtensions">
            <summary>
            A number of useful string extensions.
            </summary>
        </member>
        <member name="M:Mages.Core.StringExtensions.ToTokenStream(System.String)">
            <summary>
            Transforms the string to a token iterator.
            </summary>
            <param name="source">The string.</param>
            <returns>The created token iterator.</returns>
        </member>
        <member name="M:Mages.Core.StringExtensions.GetScanner(System.String)">
            <summary>
            Gets a scanner to walk through the provided source.
            </summary>
            <param name="source">The string.</param>
            <returns>The created scanner.</returns>
        </member>
        <member name="M:Mages.Core.StringExtensions.IsCompleted(System.String)">
            <summary>
            Checks if the source could be considered completed. This is not to
            indicate that the source is error free, but at least all open brackets
            have their partner.
            </summary>
            <param name="source">The string.</param>
            <returns>True if the source is completed, otherwise false.</returns>
        </member>
        <member name="T:Mages.Core.TextPosition">
            <summary>
            Represents a position within a text source.
            </summary>
        </member>
        <member name="M:Mages.Core.TextPosition.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new text position.
            </summary>
            <param name="row">The row number.</param>
            <param name="column">The column number.</param>
            <param name="index">The character index.</param>
        </member>
        <member name="P:Mages.Core.TextPosition.Row">
            <summary>
            Gets the row in the source code.
            </summary>
        </member>
        <member name="P:Mages.Core.TextPosition.Column">
            <summary>
            Gets the column in the source code.
            </summary>
        </member>
        <member name="P:Mages.Core.TextPosition.Index">
            <summary>
            Gets the index (absolute position) in the source code.
            </summary>
        </member>
        <member name="M:Mages.Core.TextPosition.op_LessThan(Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Compares the index of the left text position against the index of the right text position.
            </summary>
        </member>
        <member name="M:Mages.Core.TextPosition.op_GreaterThan(Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Compares the index of the left text position against the index of the right text position.
            </summary>
        </member>
        <member name="M:Mages.Core.TextPosition.op_LessThanOrEqual(Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Compares the index of the left text position against the index of the right text position.
            </summary>
        </member>
        <member name="M:Mages.Core.TextPosition.op_GreaterThanOrEqual(Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Compares the index of the left text position against the index of the right text position.
            </summary>
        </member>
        <member name="M:Mages.Core.TextPosition.op_Equality(Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Compares the index of the left text position against the index of the right text position.
            </summary>
        </member>
        <member name="M:Mages.Core.TextPosition.op_Inequality(Mages.Core.TextPosition,Mages.Core.TextPosition)">
            <summary>
            Compares the index of the left text position against the index of the right text position.
            </summary>
        </member>
        <member name="M:Mages.Core.TextPosition.Equals(System.Object)">
            <summary>
            Checks the types for equality.
            </summary>
        </member>
        <member name="M:Mages.Core.TextPosition.GetHashCode">
            <summary>
            Returns the index of the text position.
            </summary>
        </member>
        <member name="M:Mages.Core.TextPosition.Equals(Mages.Core.TextPosition)">
            <summary>
            Checks the types for equality.
            </summary>
        </member>
        <member name="T:Mages.Core.Tokens.IToken">
            <summary>
            Represents a token found by the tokenizer.
            </summary>
        </member>
        <member name="P:Mages.Core.Tokens.IToken.Type">
            <summary>
            Gets the type of the token.
            </summary>
        </member>
        <member name="P:Mages.Core.Tokens.IToken.Payload">
            <summary>
            Gets the payload of the token.
            </summary>
        </member>
        <member name="T:Mages.Core.Tokens.ITokenizer">
            <summary>
            Represents the tokenizer performing the lexical analysis.
            </summary>
        </member>
        <member name="M:Mages.Core.Tokens.ITokenizer.Next(Mages.Core.Source.IScanner)">
            <summary>
            Gets the next token from the scanner.
            </summary>
            <returns>The token.</returns>
        </member>
        <member name="T:Mages.Core.Tokens.TokenType">
            <summary>
            The available token types.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Unknown">
            <summary>
            Unknown token type.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Keyword">
            <summary>
            Keyword token.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Identifier">
            <summary>
            Identifier token.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Number">
            <summary>
            Number token.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.InterpolatedString">
            <summary>
            Interpolated string token.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.String">
            <summary>
            String token.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.OpenGroup">
            <summary>
            Round bracket open.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.CloseGroup">
            <summary>
            Round bracket close.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.OpenList">
            <summary>
            Square bracket open.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.CloseList">
            <summary>
            Square bracket close.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.OpenScope">
            <summary>
            Curly bracket open.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.CloseScope">
            <summary>
            Curly bracket close.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Comma">
            <summary>
            Comma symbol.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Colon">
            <summary>
            Colon symbol.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Dot">
            <summary>
            Dot symbol.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Power">
            <summary>
            Power operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.RightDivide">
            <summary>
            Right divide operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.LeftDivide">
            <summary>
            Left divide operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Multiply">
            <summary>
            Multiply operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Modulo">
            <summary>
            Modulo operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Factorial">
            <summary>
            Factorial operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Add">
            <summary>
            Add operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Subtract">
            <summary>
            Subtract operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Increment">
            <summary>
            Increment operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Decrement">
            <summary>
            Decrement operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Or">
            <summary>
            Or operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.And">
            <summary>
            And operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Equal">
            <summary>
            Equal operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.NotEqual">
            <summary>
            Not equal operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Less">
            <summary>
            Less operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.LessEqual">
            <summary>
            Less or equal operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.GreaterEqual">
            <summary>
            Greater or equal operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Greater">
            <summary>
            Greater operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Negate">
            <summary>
            Negate operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Condition">
            <summary>
            Condition operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Transpose">
            <summary>
            Transpose operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Assignment">
            <summary>
            Assignment operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Lambda">
            <summary>
            Lambda operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Type">
            <summary>
            Type operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Pipe">
            <summary>
            Pipe operator.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.SemiColon">
            <summary>
            Semicolon symbol.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.End">
            <summary>
            EOF.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Space">
            <summary>
            Any kind of space symbol.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Preprocessor">
            <summary>
            Preprocessor token.
            </summary>
        </member>
        <member name="F:Mages.Core.Tokens.TokenType.Comment">
            <summary>
            Comment token.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.ExecutionContext">
            <summary>
            Assembles the MAGES runtime memory model.
            </summary>
        </member>
        <member name="M:Mages.Core.Vm.ExecutionContext.#ctor(Mages.Core.Vm.IOperation[],System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new execution context.
            </summary>
            <param name="operations">The operations to use.</param>
            <param name="scope">The global scope to use.</param>
        </member>
        <member name="P:Mages.Core.Vm.ExecutionContext.Position">
            <summary>
            Gets the current position of the execution context.
            </summary>
        </member>
        <member name="P:Mages.Core.Vm.ExecutionContext.End">
            <summary>
            Gets the position of the last operation.
            </summary>
        </member>
        <member name="P:Mages.Core.Vm.ExecutionContext.Scope">
            <summary>
            Gets the currently used scope of the execution context.
            </summary>
        </member>
        <member name="M:Mages.Core.Vm.ExecutionContext.Execute">
            <summary>
            Executes the operations.
            </summary>
        </member>
        <member name="M:Mages.Core.Vm.ExecutionContext.Push(System.Object)">
            <summary>
            Pushes the value onto the stack.
            </summary>
            <param name="value">The value to push.</param>
        </member>
        <member name="M:Mages.Core.Vm.ExecutionContext.Pop">
            <summary>
            Pops a value from the stack.
            </summary>
            <returns>The last value from the stack.</returns>
        </member>
        <member name="T:Mages.Core.Vm.ExecutionContextExtensions">
            <summary>
            Extension methods for IExecutionContext instances.
            </summary>
        </member>
        <member name="M:Mages.Core.Vm.ExecutionContextExtensions.Stop(Mages.Core.Vm.IExecutionContext)">
            <summary>
            Stops the execution of the given context.
            </summary>
            <param name="context">The context to stop.</param>
        </member>
        <member name="M:Mages.Core.Vm.ExecutionContextExtensions.Pause(Mages.Core.Vm.IExecutionContext)">
            <summary>
            Pauses the execution of the given context.
            </summary>
            <param name="context">The context to pause.</param>
        </member>
        <member name="T:Mages.Core.Vm.IExecutionContext">
            <summary>
            Represents the model of the MAGES VM.
            </summary>
        </member>
        <member name="P:Mages.Core.Vm.IExecutionContext.Position">
            <summary>
            Gets or sets the position of the previous operation.
            </summary>
        </member>
        <member name="P:Mages.Core.Vm.IExecutionContext.End">
            <summary>
            Gets the position of the last operation.
            </summary>
        </member>
        <member name="P:Mages.Core.Vm.IExecutionContext.Scope">
            <summary>
            Gets the currently used execution scope.
            </summary>
        </member>
        <member name="M:Mages.Core.Vm.IExecutionContext.Push(System.Object)">
            <summary>
            Pushes a new value on the stack.
            </summary>
            <param name="value">The value to push on the stack.</param>
        </member>
        <member name="M:Mages.Core.Vm.IExecutionContext.Pop">
            <summary>
            Pops a value from the stack.
            </summary>
            <returns>The value that came from the stack.</returns>
        </member>
        <member name="T:Mages.Core.Vm.IOperation">
            <summary>
            Represents the core interface of an interpreted operation.
            </summary>
        </member>
        <member name="M:Mages.Core.Vm.IOperation.Invoke(Mages.Core.Vm.IExecutionContext)">
            <summary>
            Invokes the operation from the execution context.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="T:Mages.Core.Vm.OperationExtensions">
            <summary>
            A set of handy helpers for operations.
            </summary>
        </member>
        <member name="M:Mages.Core.Vm.OperationExtensions.Serialize(Mages.Core.Vm.IOperation[])">
            <summary>
            Serializes the given operations to a string of instructions.
            </summary>
            <param name="operations">The operations to serialize.</param>
            <returns>The string with the instructions.</returns>
        </member>
        <member name="T:Mages.Core.Vm.Operations.ArgcOperation">
            <summary>
            Checks if the parameters |Object[]| is less / equal than i by
            popping one value from the stack and pushing back two values.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.ArgoOperation">
            <summary>
            Assigns the argument at index i by popping two values
            from the scope and pushing one value back.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.ArgOperation">
            <summary>
            Populates the local scope with one of the arguments.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.ArgsOperation">
            <summary>
            Pops one element from the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.CondOperation">
            <summary>
            Pops three elements from the stack and pushes one.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.ConstOperation">
            <summary>
            Pushes a constant value on the stack.
            </summary>
        </member>
        <member name="F:Mages.Core.Vm.Operations.ConstOperation.Null">
            <summary>
            Contains a const operation pushing null on the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.DecOperation">
            <summary>
            Pops one element from the stack and pushes one element.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.DefOperation">
            <summary>
            Peeks the top element from the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.DelKeyOperation">
            <summary>
            Pops one value and tries to remove the key from the object.
            Pushes the result on the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.DelVarOperation">
            <summary>
            Tries to remove the named variable from the scope and pushes the result
            on the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.GetcOperation">
            <summary>
            Takes two elements from the stack and pushes one.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.GetpOperation">
            <summary>
            Takes two elements from the stack and pushes the result.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.GetsOperation">
            <summary>
            Pushes the loaded value on the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.IncOperation">
            <summary>
            Pops one element from the stack and pushes one element.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.InitMatOperation">
            <summary>
            Peeks the top element from the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.InitObjOperation">
            <summary>
            Pops three elements from the stack and pushes on element.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.JumpOperation">
            <summary>
            Changes the currently executing position.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.NewFuncOperation">
            <summary>
            Pushes one new element on the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.NewMatOperation">
            <summary>
            Pushes one new element on the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.NewMethOperation">
            <summary>
            Pops two elements from the stack and pushes three new element on the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.NewObjOperation">
            <summary>
            Pushes one new element on the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.PopIfOperation">
            <summary>
            Pops one element from the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.PopOperation">
            <summary>
            Pops one element from the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.RetOperation">
            <summary>
            Stops the execution without changing the stack.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.RngeOperation">
            <summary>
            Pops three elements from the stack and pushes one.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.RngiOperation">
            <summary>
            Pops two elements from the stack and pushes one.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.SetcOperation">
            <summary>
            Pops at least two elements from the stack and pushes one.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.SetpOperation">
            <summary>
            Pops three elements from the stack and pushes one.
            </summary>
        </member>
        <member name="T:Mages.Core.Vm.Operations.SetsOperation">
            <summary>
            Peeks the top element from the stack.
            </summary>
        </member>
    </members>
</doc>
